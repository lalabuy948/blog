<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on </title>
    <link>https://mrpopov.com/tags/docker/</link>
    <description>Recent content in Docker on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Aug 2020 16:37:03 +0200</lastBuildDate><atom:link href="https://mrpopov.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis Cluster in Docker Compose</title>
      <link>https://mrpopov.com/posts/redis-cluster-in-docker-compose/</link>
      <pubDate>Sun, 16 Aug 2020 16:37:03 +0200</pubDate>
      
      <guid>https://mrpopov.com/posts/redis-cluster-in-docker-compose/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;x: Why would you do this?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;y: Because one not enough?&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Testing Mailer in Go</title>
      <link>https://mrpopov.com/posts/testing-mailer-in-go/</link>
      <pubDate>Sun, 08 Mar 2020 19:23:14 +0100</pubDate>
      
      <guid>https://mrpopov.com/posts/testing-mailer-in-go/</guid>
      <description>&lt;h2 id=&#34;forewords&#34;&gt;Forewords&lt;/h2&gt;
&lt;p&gt;I needed a way to test mail confirmation. When you are dealing with deb authentication you would like to be sure that this email exist. And usually I use &lt;code&gt;is_email_confirmed&lt;/code&gt; column next to user credentials in the database table. Once user hits siging endpoint as last step I send an email with confirmation token.&lt;/p&gt;
&lt;p&gt;I was looking on few popular tools across the Internet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mailtrap.io/&#34;&gt;https://mailtrap.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mailcow.email/&#34;&gt;https://mailcow.email/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mailu.io/1.7/&#34;&gt;https://mailu.io/1.7/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://poste.io/&#34;&gt;https://poste.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-i-found&#34;&gt;What I found&lt;/h2&gt;
&lt;p&gt;My requirements were: run in docker, easy to config, basic functionality to render email. All things above quite heavy apps with complex configuration. After that I found found nice and lightweight way how to test it locally.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Flexible Env in Go</title>
      <link>https://mrpopov.com/posts/flexible-env-in-go/</link>
      <pubDate>Sat, 07 Mar 2020 09:00:59 +0100</pubDate>
      
      <guid>https://mrpopov.com/posts/flexible-env-in-go/</guid>
      <description>&lt;h2 id=&#34;forewords&#34;&gt;Forewords&lt;/h2&gt;
&lt;p&gt;I was doing hobby project, nothing special, server with authentication few endpoints and connection to database.
I wrapped this project in docker to distribute project to another developer, he wanted to help with fronted but not that fluent at the backend part.
Then I realized that my friend does not want to struggle with database setup and so on. So, solution was straight forward - docker-compose.&lt;/p&gt;
&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;
&lt;p&gt;I prefer using &lt;code&gt;.env&lt;/code&gt; instead of typing stuff to cli. I found out really elegant solution. You can still use &lt;code&gt;.env&lt;/code&gt; and parse it easily with
&lt;code&gt;github.com/caarlos0/env/v6&lt;/code&gt;, specify default values or even load file (certificates etc). But in docker-compose you need to specify same ports for database for example. Here comes &lt;code&gt;github.com/joho/godotenv&lt;/code&gt;, if you provide environment variables via dockerfile or docker-compose it will override constants in your &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
