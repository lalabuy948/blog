<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on </title>
    <link>https://mrpopov.com/tags/tutorial/</link>
    <description>Recent content in tutorial on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Oct 2025 21:55:18 +0200</lastBuildDate><atom:link href="https://mrpopov.com/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Elixir Liveview Signle Binary</title>
      <link>https://mrpopov.com/posts/elixir-liveview-signle-binary/</link>
      <pubDate>Mon, 06 Oct 2025 21:55:18 +0200</pubDate>
      
      <guid>https://mrpopov.com/posts/elixir-liveview-signle-binary/</guid>
      <description>We had two repos of Elixir, seventy-five LiveView components, five sheets of high-powered Phoenix channels, a saltshaker half-full of SQLite databases, and a whole multicolored collection of Burrito deployables, Tauri binaries, WebView wrappers, hot-reloaders&amp;hellip; Also, a quart of WebSockets, a quart of GenServers, a case of Ecto queries, a pint of raw BEAM bytecode, and two dozen supervisors.
The only thing that really worried me was the WebView. There is nothing in the world more helpless and irresponsible and depraved than a developer in the depths of a cross-platform binge, and I knew we&amp;rsquo;d get into that rotten stuff pretty soon.</description>
    </item>
    
    <item>
      <title>Connect Livebook to Phoenix on Vps</title>
      <link>https://mrpopov.com/posts/connect-livebook-to-phoenix-on-vps/</link>
      <pubDate>Sat, 03 Aug 2024 14:19:03 +0200</pubDate>
      
      <guid>https://mrpopov.com/posts/connect-livebook-to-phoenix-on-vps/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://livebook.dev&#34;&gt;Livebook&lt;/a&gt; is very powerful application which can be used in many different ways with your &lt;a href=&#34;https://www.phoenixframework.org&#34;&gt;Phoneix&lt;/a&gt; project.
I have few apps running on my VPS and sometimes I would like to run some functions without creating interface for them from admin side, such as cache clean up. Perhaps run some analytical queries to the database and much more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Single File Chat in Elixir Phoenix</title>
      <link>https://mrpopov.com/posts/single-file-chat-in-elixir-phoenix/</link>
      <pubDate>Fri, 12 Jul 2024 23:46:53 +0200</pubDate>
      
      <guid>https://mrpopov.com/posts/single-file-chat-in-elixir-phoenix/</guid>
      <description>&lt;h2 id=&#34;meet-phonenixplaygroundhttpshexdocspmphoenix_playgroundreadmehtml&#34;&gt;Meet &lt;a href=&#34;https://hexdocs.pm/phoenix_playground/readme.html&#34;&gt;PhonenixPlayground&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found this library on github suggestions and I always wanted to have something simple and quick to test out LiveView prototypes. What can be quicker than opening Livebook and trying something there? Folks behind &lt;a href=&#34;https://hexdocs.pm/phoenix_playground/readme.html&#34;&gt;PhonenixPlayground&lt;/a&gt; made both of my wishes come true!&lt;/p&gt;
&lt;p&gt;If you would like jump straight into the code:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://livebook.dev/run?url=https%3A%2F%2Fmrpopov.com%2Fposts%2Fsingle-file-chat-in-elixir-phoenix%2Fphoenix-dirty-chat.livemd&#34;&gt;&lt;img src=&#34;https://livebook.dev/badge/v1/pink.svg&#34; alt=&#34;Run in Livebook&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Notion Github Backup</title>
      <link>https://mrpopov.com/posts/notion-github-backup/</link>
      <pubDate>Thu, 11 Mar 2021 17:11:54 +0100</pubDate>
      
      <guid>https://mrpopov.com/posts/notion-github-backup/</guid>
      <description>Data is expensive I write around 2-3 important notes a day. And don&amp;rsquo;t actually worry if my laptop will be stolen, but the data on it..
Since Im heavy notion user I was looking for automated backup solution. Not that I don&amp;rsquo;t trust notion, trust but verify, right?
Backup Create a private github repo Go to actions tab and click on set up a workflow yourself -&amp;gt; Paste this yml file name: &amp;#34;Notion backup&amp;#34; on: push: branches: - main schedule: - cron: &amp;#34;0 0 * * *&amp;#34; jobs: backup: runs-on: ubuntu-latest name: Backup timeout-minutes: 15 steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v2 with: node-version: &amp;#34;12&amp;#34; - name: Setup dependencies run: npm install -g notion-backup - name: Run backup run: notion-backup env: NOTION_TOKEN: ${{ secrets.</description>
    </item>
    
    <item>
      <title>Flexible Env in Go V2</title>
      <link>https://mrpopov.com/posts/flexible-env-in-go-v2/</link>
      <pubDate>Fri, 25 Sep 2020 10:07:13 +0200</pubDate>
      
      <guid>https://mrpopov.com/posts/flexible-env-in-go-v2/</guid>
      <description>lalabuy948/genvutils Motivation As you probably saw my founding of two nice libraries that allow you beauty and easy abstraction on dot and just environment variables. You can check it there
After some time I decided to create another open-source library for the world and I merged the functionality of packages which you can find in the article above. I started from scratch and you are more than welcome to have look on it on my GitHub -&amp;gt; github.</description>
    </item>
    
    <item>
      <title>Hashicorp Vault as Environment Manager</title>
      <link>https://mrpopov.com/posts/hashicorp-vault-as-environment-manager/</link>
      <pubDate>Sat, 20 Jun 2020 20:09:43 +0200</pubDate>
      
      <guid>https://mrpopov.com/posts/hashicorp-vault-as-environment-manager/</guid>
      <description>How to use Hashicorp Vault as dot environment manager? I decided to share this because I was looking for small, simple and easy to use tool where I would store dotenv secrets for my apps. And I found this nice and elegant solution which will allow you to control your application secrets with small bash script. ðŸ™‚
Pre Requirements Installed vault Finish setup instructions You can find nicely described steps here: Getting started</description>
    </item>
    
    <item>
      <title>Testing Mailer in Go</title>
      <link>https://mrpopov.com/posts/testing-mailer-in-go/</link>
      <pubDate>Sun, 08 Mar 2020 19:23:14 +0100</pubDate>
      
      <guid>https://mrpopov.com/posts/testing-mailer-in-go/</guid>
      <description>Forewords I needed a way to test mail confirmation. When you are dealing with deb authentication you would like to be sure that this email exist. And usually I use is_email_confirmed column next to user credentials in the database table. Once user hits siging endpoint as last step I send an email with confirmation token.
I was looking on few popular tools across the Internet:
https://mailtrap.io/ https://mailcow.email/ https://mailu.io/1.7/ https://poste.io/ What I found My requirements were: run in docker, easy to config, basic functionality to render email.</description>
    </item>
    
    <item>
      <title>Flexible Env in Go</title>
      <link>https://mrpopov.com/posts/flexible-env-in-go/</link>
      <pubDate>Sat, 07 Mar 2020 09:00:59 +0100</pubDate>
      
      <guid>https://mrpopov.com/posts/flexible-env-in-go/</guid>
      <description>Forewords I was doing hobby project, nothing special, server with authentication few endpoints and connection to database. I wrapped this project in docker to distribute project to another developer, he wanted to help with fronted but not that fluent at the backend part. Then I realized that my friend does not want to struggle with database setup and so on. So, solution was straight forward - docker-compose.
Problem I prefer using .</description>
    </item>
    
  </channel>
</rss>
